using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EducationalMalwareKit.Domain.Build.Compilers
{
    public class CSharpCompilerArguments : CompilerArguments
    {
        public CSharpCompilerArguments(string buildToolsPath) : base(buildToolsPath)
        {
        }

        public override IEnumerable<string> GetSourceFileExtensions()
        {
            return new[] { ".cs" };
        }

        public override string GetBootstrapperCompilerArguments(MalwareBuild malwareBuild)
        {
            var sb = new StringBuilder();
            sb
                .Append("csc")
                .Append(" /out:")
                .Append(malwareBuild.UserOptions.ExecutableName)
                .Append(" /target:exe")
                .Append($" /r:{malwareBuild.PayloadFileName}")
                .Append($" /resource:{malwareBuild.CompiledPayloadPath}");

            if (malwareBuild.UserOptions.Debug)
            {
                sb.Append(" /debug:full");
            }

            return sb.Append(" main.cs").ToString();
        }

        public override string GetPayloadCompilerArguments(MalwareBuild malwareBuild)
        {
            var sb = new StringBuilder();
            sb
                .Append("csc")
                .Append(" /out:")
                .Append(malwareBuild.PayloadFileName)
                .Append(" /target:library");

            if (malwareBuild.Manifest.Dependencies.Any())
            {
                foreach (var depPath in malwareBuild.Manifest.Dependencies)
                {
                    sb.Append(" /r:\"" + depPath + "\"");
                    sb.Append(" /resource:\"" + depPath + "\"");
                }
            }

            if (malwareBuild.UserOptions.Debug)
            {
                sb.Append(" /debug:full");
            }

            return sb.Append(" *.cs").ToString();
        }
    }
}
