using System;
using EducationalMalwareKit.Assembler.Properties;
using EducationalMalwareKit.Domain.Build;
using EducationalMalwareKit.Domain.Payloads;
using HandlebarsDotNet;

namespace EducationalMalwareKit.Assembler
{
    internal static class TemplateHandler
    {
        public static string PrepareTemplate(MalwareBuild malwareBuild)
        {
            var source = GetTemplate(malwareBuild);

            var template = Handlebars.Compile(source);

            var result = template(new
            {
                mainClass = malwareBuild.Manifest.MainClass,
                initMethod = malwareBuild.Manifest.InitMethod,
                debug = malwareBuild.UserOptions.Debug
            });

            return result;
        }

        private static string GetTemplate(MalwareBuild malwareBuild)
        {
            switch (malwareBuild.Manifest.Language)
            {
                case PayloadManifest.LanguageCPlusPlus:
                    return Resources.CPlusPlus_Standard;
                case PayloadManifest.LanguageCSharp:
                    return Resources.CSharp_Standard;
                default:
                    throw new ArgumentException($"Cannot find template for language {malwareBuild.Manifest.Language}");
            }
        }


    }
}
