using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System;
using System.IO;
using System.Reflection;
using System.Text;
{{#if encryptDependecies}}
using System.Security.Cryptography;
{{/if}}

internal class aaa
{
	[DllImport("Kernel32")]
	private static extern bool SetConsoleCtrlHandler(EventHandler handler, bool add);

	[DllImport("kernel32.dll")]
	private static extern IntPtr GetConsoleWindow();

	[DllImport("user32.dll")]
	private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

	private const int SW_HIDE = 0;
	private const int SW_SHOW = 5;

	private delegate bool EventHandler();
	private static EventHandler _handler;

	private static {{mainClass}} _whoami;

	private static bool Handler()
	{
		{{#if haltMethod}}
		_whoami.OnHalt();
		{{/if}}
		
		return false;
	}

	public static void Main(string[] pargs)
	{
		ShowWindow(GetConsoleWindow(), SW_HIDE);

		{{#if debug}}
		ShowWindow(GetConsoleWindow(), SW_SHOW);
		Console.WriteLine("Attach debugger now ...");
		Console.ReadKey();
          
		if (System.Diagnostics.Debugger.IsAttached)
        {
            System.Diagnostics.Debugger.Break();
        }
		{{/if}}

		try 
		{
			AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>
			{				   
				var assemblyName = new AssemblyName(args.Name).Name + ".dll";

				{{#if encryptDependecies}}
				byte[] x = {{encryptionKey}};
				byte[] y = {{encyptionSalt}};
				{{/if}}
				byte[] data;

				using (Stream s = Assembly.GetEntryAssembly().GetManifestResourceStream(assemblyName))
				{				
					data = new byte[s.Length];
					s.Read(data, 0, data.Length);						
				}								
				{{#if encryptDependecies}}
				return Assembly.Load(DB(data, x, y));
				{{else}}
				return Assembly.Load(data);
				{{/if}}
			};

			//{EmkCamoProcess}

			Go();
		}
		catch (Exception ex) {
			{{#if debug}}
			Console.WriteLine(ex.Message);
			{{/if}}
		}
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void Go() 
	{
		_handler += Handler;
		SetConsoleCtrlHandler(_handler, true);

		_whoami = new {{mainClass}}();
		_whoami.{{initMethod}}();
	}

	{{#if encryptDependecies}}
    public static byte[] DB(byte[] cB, byte[] pB, byte[] sB)
    {
        byte[] clearBytes = null;

        // create a key from the password and salt, use 32K iterations
        var key = new Rfc2898DeriveBytes(pB, sB, 32768);

        using (Aes aes = new AesManaged())
        {
            // set the key size to 256
            aes.KeySize = 256;
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);

            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cB, 0, cB.Length);
                    cs.Close();
                }
                clearBytes = ms.ToArray();
            }
        }
        return clearBytes;
    }
	{{/if}}
}
