using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using EducationalMalwareKit.Assembler.Encryption;
using EducationalMalwareKit.Domain.Build;

namespace EducationalMalwareKit.Assembler
{
    internal static class FileHandler
    {
        public static string WriteMainClassToFileAsync(MalwareBuild malwareBuild, string code)
        {
            var compilerArgs = malwareBuild.CompilerArguments;
            var fileExtension = compilerArgs.GetSourceFileExtensions().First();
            var filePath = Path.Combine(malwareBuild.WorkingDir, "main" + fileExtension);

            using (var writer = File.CreateText(filePath))
            {
                writer.Write(code);
                writer.Close();
            }

            return filePath;
        }

        public static void CopyPayloadToWorkingDir(MalwareBuild malwareBuild)
        {
            var compilerArgs = malwareBuild.CompilerArguments;
            var targetExtensions = compilerArgs.GetSourceFileExtensions() as IList<string>;

            foreach (var filePath in GetFiles(malwareBuild.Manifest.PayloadDirPath))
            {
                var extension = Path.GetExtension(filePath);
                var isTargetFile = targetExtensions.Any(x => string.Equals(x, extension));

                if (!isTargetFile)
                {
                    continue;
                }

                using (var reader = File.OpenText(filePath))
                {
                    var code = TemplateHandler.InsertConfigValues(malwareBuild.Manifest.Config, reader.ReadToEnd());

                    using (var writer = File.CreateText(Path.Combine(malwareBuild.WorkingDir, Path.GetFileName(filePath))))
                    {
                        writer.Write(code);
                    }
                }
            }
        }

        public static string CopyAndReplaceFile(string sourcePath, string targetPath)
        {
            File.Copy(sourcePath, targetPath, true);

            return targetPath;
        }

        public static void SetDependencyPaths(MalwareBuild malwareBuild)
        {
            var libPath = Path.Combine(malwareBuild.Manifest.PayloadDirPath, "lib");

            if (!Directory.Exists(libPath))
            {
                return;
            }

            foreach (var libFilePath in Directory.GetFiles(libPath))
            {
                malwareBuild.Manifest.SetDependecyPath(libFilePath);
            }
        }

        public static void CleanDirectory(string path, string excludeExtension)
        {
            var files = Directory.GetFiles(path);

            foreach (var filePath in files)
            {
                if (filePath.EndsWith(excludeExtension))
                {
                    continue;
                }

                File.Delete(filePath); ;
            }
        }

        private static IEnumerable<string> GetFiles(string root)
        {
            var pending = new Stack<string>();
            pending.Push(root);

            while (pending.Count != 0)
            {
                var path = pending.Pop();
                string[] next = null;

                try
                {
                    next = Directory.GetFiles(path);
                }
                catch (Exception e)
                {
                }

                if (next != null && next.Length != 0)
                {
                    foreach (var file in next)
                    {
                        yield return file;
                    }
                }

                try
                {
                    next = Directory.GetDirectories(path);
                    foreach (var subdir in next) pending.Push(subdir);
                }
                catch (Exception e)
                {
                }
            }
        }
    }
}
