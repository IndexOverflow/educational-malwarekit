using System;
using System.Diagnostics;
using EducationalMalwareKit.Domain.Build;

namespace EducationalMalwareKit.Assembler
{
    public class CommandLineHandler 
    {
        private readonly Process _commandPromptProcess;
        private readonly MalwareBuild _malwareBuild;

        public static CommandLineHandler Init(MalwareBuild malwareBuild)
        {
            return new CommandLineHandler(malwareBuild);
        }

        private CommandLineHandler(MalwareBuild malwareBuild)
        {
            _malwareBuild = malwareBuild;
            var args = $"%comspec% /k \"{_malwareBuild.CompilerArguments.BuildToolsPath}\"";

            _commandPromptProcess = GetCommandPromptProcess(_malwareBuild.WorkingDir, args);
            _commandPromptProcess.Start();
        }

        public void Compile()
        {
            _commandPromptProcess.StandardInput.WriteLine(_malwareBuild.CompilerArguments.ToString(_malwareBuild));
            CloseSession();
        }

        public void PackageExecutable(string toolPath)
        {
            _commandPromptProcess.StandardInput.WriteLine($"{toolPath} {_malwareBuild.UserOptions.ExecutableName}");
            CloseSession();
        }

        public void CloseSession()
        {
            _commandPromptProcess.StandardInput.WriteLine("exit");
            _commandPromptProcess.WaitForExit(3 * 1000);
            _commandPromptProcess?.Dispose();
        }

        private static Process GetCommandPromptProcess(string workingDir, string args = null)
        {
            return new Process
            {
                StartInfo = new ProcessStartInfo()
                {
                    Arguments = args,
                    FileName = "cmd.exe",
                    RedirectStandardError = false,
                    RedirectStandardInput = true,
                    RedirectStandardOutput = false,
                    UseShellExecute = false,
                    WorkingDirectory = workingDir,
                    CreateNoWindow = false
                },
                EnableRaisingEvents = true
            };
        }
    }
}
