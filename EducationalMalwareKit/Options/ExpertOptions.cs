using CommandLine;
using EducationalMalwareKit.CodeAssembly.Models;
using Newtonsoft.Json;

namespace EducationalMalwareKit.Options
{
    [Verb("expert", HelpText = "Expert mode. Define each parameter manually")]
    public class ExpertOptions
    {
        [JsonIgnore]
        [Option('l', "library-id", Required = false, HelpText = "Parameter. Payload Library Id, use instead of payload-dir. Note that IDs are applicable to your install only.")]
        public int LibraryEntryId { get; set; }

        [Option('p', "payload-dir", Required = false, HelpText = "Parameter. Dir which contains the payload to load. Supporting assemblies (if any) must be in same dir")]
        public string PayloadDirectoryPath { get; set; }

        [Option('o', "output-dir", Required = true, HelpText = "Parameter. Output dir to place the assembled malware in")]
        public string OutputDirectoryPath { get; set; }

        [Option("camouflage", Required = false, HelpText = "Parameter. Name of process to launch at malware execution. Include icon file, .ico, in payload dir for extra effect")]
        public string CamouflageAs { get; set; }

        [Option("net-version", Required = false, HelpText = "Parameter. The .NET Version you want to target (e.g v3.5, v4). Ensure that referenced assemblies are compatible and that you have the framework installed locally")]
        public string NetVersion { get; set; } = CompilerInstructions.NetVersion4;

        [Option('c', "config", Required = false, HelpText = "Parameter. Path to payload config (if required). If only filename is provided, will assume same as payload dir. Must be a JSON-formatted file in key-value format")]
        public string ConfigFilePath { get; set; }

        [Option("debug-mode", Required = false, HelpText = "Flag. Enable debug mode for created malware (logging etc)")]
        public bool DebugMode { get; set; }

        [JsonIgnore]
        [Option("include-debug", Required = false, HelpText = "Flag. Include debug data (symbols, generated classes) in output dir")]
        public bool IncludeDebugData { get; set; }       

        [JsonIgnore]
        [Option("build-file", Required = false, HelpText = "Flag. Create a build file from this build (only created if build is successfull)")]
        public bool CreateBuildFile { get; set; }

        [Option('n', "name", Required = true, HelpText = "Parameter. The name of the generated executable")]
        public string OutputName
        {
            get { return _outputName.EndsWith(".exe") ? _outputName : _outputName + ".exe"; }
            set { _outputName = value; }
        }

        private string _outputName;

        public string EmkVersion { get; set; }

        [JsonIgnore]
        public bool CreatedFromBuildFile { get; set; }

        public bool CanBeBuildFile()
        {
            return !CreatedFromBuildFile && CreateBuildFile;
        }
    }
}
