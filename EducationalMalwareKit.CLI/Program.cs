using System;
using System.IO;
using System.Linq;
using System.Reflection;
using EducationalMalwareKit.Assembler;
using EducationalMalwareKit.Domain.Build;
using EducationalMalwareKit.Domain.Build.Compilers;

namespace EducationalMalwareKit.CLI
{
    internal class Program
    {
        private static string _rootPath;
        private static string _workingDirRoot;

        public static void Main(string[] args)
        {
            _rootPath = Path.GetDirectoryName(new Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);

            var manifest = PayloadHandler.GetPayloadManifests().Single(x => x.Name == "HelloSharp");
            var userOptions = new UserOptions()
            {
                Debug = true
            };

            var malwareBuild = new MalwareBuild(manifest, userOptions) {WorkingDir = CreateWorkingDir()};


            var compilerProcess = CodeAssembler.AssembleMalwareBuild(malwareBuild);
            compilerProcess.WaitForExit(10 * 1000);

            Console.WriteLine("\nDone. Press any key to exit ...");
            Console.ReadKey();
        }

        private static string CreateWorkingDir()
        {
            _workingDirRoot = Path.Combine(_rootPath, "out");

            if (!Directory.Exists(_workingDirRoot))
            {
                Console.WriteLine("Creating working dir ...");                
                Directory.CreateDirectory(_workingDirRoot);
                Console.WriteLine($"Created: {_workingDirRoot}");
            }

            var workingDir = Path.Combine(_workingDirRoot, DateTime.Now.Ticks.ToString());
            Directory.CreateDirectory(workingDir);

            return workingDir;
        }
    }
}
