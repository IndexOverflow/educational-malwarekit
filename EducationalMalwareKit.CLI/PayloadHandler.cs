using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using EducationalMalwareKit.Domain.Payloads;
using Newtonsoft.Json;

namespace EducationalMalwareKit.CLI
{
    public static class PayloadHandler
    {
        private const string Payloads = "payloads";
        private static readonly string _payloadsPath;
        private static List<PayloadManifest> _payloadManifests;

        static PayloadHandler()
        {            
            var path = Assembly.GetExecutingAssembly().CodeBase;            
            var payloads = Path.GetDirectoryName(path);

            _payloadsPath = new Uri(Path.Combine(payloads, Payloads)).LocalPath;
        }

        public static List<PayloadManifest> GetPayloadManifests()
        {
            if (_payloadManifests != null && _payloadManifests.Any())
            {
                return _payloadManifests;
            }

            _payloadManifests = new List<PayloadManifest>();
            LoadPayloads();

            return _payloadManifests;
        }

        private static void LoadPayloads()
        {
            foreach (var file in GetFiles(_payloadsPath))
            {
                if (!file.EndsWith("manifest.json"))
                {
                    continue;
                }

                using (var streamReader = new StreamReader(file))
                {
                    var json = streamReader.ReadToEnd();
                    var manifest = JsonConvert.DeserializeObject<PayloadManifest>(json);
                    manifest.PayloadDirPath = Path.GetDirectoryName(file);

                    _payloadManifests.Add(manifest);
                }                
            }
        }

        private static IEnumerable<string> GetFiles(string root)
        {
            var pending = new Stack<string>();
            pending.Push(root);

            while (pending.Count != 0)
            {
                var path = pending.Pop();
                string[] next = null;

                try
                {
                    next = Directory.GetFiles(path);
                }
                catch (Exception e)
                { }

                if (next != null && next.Length != 0)
                {
                    foreach (var file in next) { yield return file; }
                }

                try
                {
                    next = Directory.GetDirectories(path);
                    foreach (var subdir in next) pending.Push(subdir);
                }
                catch (Exception e)
                { }
            }
        }

    }
}
