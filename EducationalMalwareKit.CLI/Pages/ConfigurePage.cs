using System;
using System.IO;
using EasyConsole;

namespace EducationalMalwareKit.CLI.Pages
{
    public class ConfigurePage : Page
    {
        public ConfigurePage(Program program) : base("Configure", program)
        {
        }

        public override void Display()
        {
            base.Display();

            var reconfigureBuildToolsPath = false;

            if (Kernel.HasBuildTools())
            {
                Output.WriteLine("Build Tools Path: " + Kernel.BuildToolsPath);
                reconfigureBuildToolsPath = InputHelper.ParseStringAsBool(Input.ReadString("Reconfigure [y]/[N]:"));
            }

            if (!Kernel.HasBuildTools() || reconfigureBuildToolsPath)
            {
                Output.WriteLine
                (
                    "Path to build tools (VsDevCmd.bat) not set.\nSee https://docs.microsoft.com/en-us/dotnet/framework/tools/developer-command-prompt-for-vs"
                );

                var buildToolsPath = GetValidToolPath("Path:");
                Kernel.SaveBuildToolsPath(buildToolsPath);
            }

            var reconfigureUpxPath = false;

            if (Kernel.HasPackager())
            {
                Output.WriteLine("UPX Path: " + Kernel.UpxPath);
                reconfigureUpxPath = InputHelper.ParseStringAsBool(Input.ReadString("Reconfigure [y]/[N]:"));
            }

            if (!Kernel.HasPackager() || reconfigureUpxPath)
            {
                Output.WriteLine
                (
                    "Path to UPX (compression tool) not set.\nSee https://github.com/upx/upx/releases"
                );

                var upxPath = GetValidToolPath("Path:");
                Kernel.SaveBuildToolsPath(upxPath);
            }

            Input.ReadString("Press [Enter] to navigate home");
            Program.NavigateHome();
        }

        private string GetValidToolPath(string prompt, int passes = 0)
        {
            var input = Input.ReadString(prompt);

            if (passes > 3)
            {
                Output.WriteLine(ConsoleColor.Red, "Failed to aquire valid path. Exiting program ...");
                Program.NavigateHome();
            }
            
            if (string.IsNullOrWhiteSpace(input) || !new FileInfo(input).Exists)
            {
                return GetValidToolPath(prompt, ++passes);
            }

            return input;
        }


    }
}
