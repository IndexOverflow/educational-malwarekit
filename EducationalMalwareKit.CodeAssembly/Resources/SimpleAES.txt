using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

internal static class X
{
    public static string DS(string cT, string pT, string sT)
    {
        byte[] cB = Convert.FromBase64String(cT);
        byte[] pB = Encoding.UTF8.GetBytes(pT);
        byte[] sB = Encoding.UTF8.GetBytes(sT);

        return Encoding.UTF8.GetString(DB(cB, pB, sB));
    }

    public static byte[] DB(byte[] cB, byte[] pB, byte[] sB)
    {
        byte[] clearBytes = null;

        // create a key from the password and salt, use 32K iterations
        var key = new Rfc2898DeriveBytes(pB, sB, 32768);

        using (Aes aes = new AesManaged())
        {
            // set the key size to 256
            aes.KeySize = 256;
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);

            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cB, 0, cB.Length);
                    cs.Close();
                }
                clearBytes = ms.ToArray();
            }
        }
        return clearBytes;
    }
}