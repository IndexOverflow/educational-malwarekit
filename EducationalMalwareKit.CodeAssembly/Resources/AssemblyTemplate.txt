using System.Collections.Generic;
using System.Runtime.InteropServices;
using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace {EmkNamespace} 
{
	internal class {EmkMainClass}
	{
		[DllImport("Kernel32")]
		private static extern bool SetConsoleCtrlHandler(EventHandler handler, bool add);
		private delegate bool EventHandler();
		private static EventHandler _handler;

		private static {PayloadMainClass} _runMe;

		private static bool Handler()
		{
			_runMe.OnHalt();
			return false;
		}

		static {EmkMainClass} () 
		{
			//Console.WriteLine("Attach debugger now ...");
			//Console.ReadKey();
            
			//if (System.Diagnostics.Debugger.IsAttached)
            //{
            //    System.Diagnostics.Debugger.Break();
            //}

			try 
			{
				AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>
				{				   
					var assemblyName = new AssemblyName(args.Name).Name;

					if (assemblyName.EndsWith(".resources"))
					{
						return null;
					}

					var dllName = assemblyName + ".dll";
					byte[] key = {EmkEncryptionKey};
					byte[] salt = {EmkEncryptionSalt};
					byte[] data;

					using (Stream s = Assembly.GetEntryAssembly().GetManifestResourceStream(dllName))
					{				
						data = new byte[s.Length];
						s.Read(data, 0, data.Length);						
					}								

					return Assembly.Load(SimpleAES.DecryptBytes(data, key, salt));
				};

				GoGoGadget();
			}
			catch (Exception ex) {
				//Console.WriteLine(ex.Message);
			}
		}

		public static void Main(string[] pargs)
		{

		}

		private static void GoGoGadget() 
		{
			_handler += Handler;
			SetConsoleCtrlHandler(_handler, true);

			Dictionary<string,string> config = {PayloadConfig};

			_runMe = new {PayloadMainClass}();
			_runMe.Run(config);
		}
	}
}