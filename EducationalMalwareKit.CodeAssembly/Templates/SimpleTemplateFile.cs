using System;
using System.Reflection;
using System.Diagnostics;
using EducationalMalwareKit.Toolkit;

namespace EducationalMalwareKit.CodeAssembly.Templates
{
    public class SimpleTemplateFile
    {
        public static void Main(string[] args)
        {
            Trace.Listeners.Add(new ConsoleTraceListener());
            Trace.AutoFlush = true;

            try
            {
                var self = AssembleSelf();

                if (self == null)
                {
                    Trace.TraceError("Failed to assemble self");
                }
                else
                {
                    Trace.TraceInformation("Assembled self, running ...");
                    self.Run(null);
                }
            }
            catch (Exception ex)
            {
                Trace.TraceError(ex.Message, ex);
            }

            Trace.TraceWarning("Payload quit ...");
            Console.ReadLine();
        }

        private static IEducationalMalwarePayload AssembleSelf()
        {
            Type payloadType = null;
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();

            Trace.TraceInformation($"Looking in for payload in {assemblies.Length} assemblies ...");

            foreach (var assembly in assemblies)
            {
                try
                {
                    var types = assembly.GetTypes();
                    Trace.TraceInformation($"Now looking in {assembly.FullName}, has {types.Length} Types");
                    payloadType = FindPayloadType(types);

                    if (payloadType != null)
                    {
                        Trace.TraceInformation("Found payload Type");
                        break;
                    }
                }
                catch (ReflectionTypeLoadException ex)
                {
                    Trace.TraceError("ReflectionTypeLoadException occoured, ignored\n" + ex.Message);
                    //types.AddRange(e.Types.Where(t => t != null)); Ignore for now
                    // http://haacked.com/archive/2012/07/23/get-all-types-in-an-assembly.aspx/
                }
            }

            if (payloadType == null)
            {
                Trace.TraceInformation("Looked through all assemblies, no results ...");
                return null;
            }

            return (IEducationalMalwarePayload)Activator.CreateInstance(payloadType);
        }

        private static Type FindPayloadType(Type[] types)
        {
            var it = typeof(IEducationalMalwarePayload);

            foreach (var type in types)
            {
                if (it.IsAssignableFrom(type) && type.IsClass)
                {
                    return type;
                }
            }

            return null;
        }
    }
}
